@model pcg.Models.VariationModel

@{
    ViewData["Title"] = "Sites";
} 
<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.2/css/selectize.bootstrap5.min.css">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/custom.css" />
</head>
<div>
<h1 style="text-align:center">Sites</h1>
</div>
<table class="table table-hover table-responsive-sm table-sm">
    <thead>
        <tr>
            <th class="text-center text-uppercase">Client/Site</th>
            <th class="text-center text-uppercase">SOM</th>
            <th class="text-center text-uppercase">OM</th>
            <th class="text-center text-uppercase"> SC/TK</th>
            <th class="text-center text-uppercase">Details</th>
        </tr>
    </thead>
    <tbody id="myTable">
        @foreach (System.Data.DataRow dr in ViewBag.Sitelist.Rows)
        {
            <tr>
                <td class="text-center text-nowrap">@dr["Client"].ToString() @dr["Site"].ToString()</td>
                <td class="text-center text-nowrap">@dr["SOMName"].ToString()</td>
                <td class="text-center text-nowrap">@dr["OMName"].ToString()</td>
                <td class="text-center text-nowrap">@dr["SCName"].ToString()@dr["TKName"].ToString()</td>
                <td class="text-center text-nowrap">
                    <div style="text-align:center">
                        <a href="@Url.Action("TaskDetail", "User", new { siteId = dr["SiteId"] })">Task Details</a> |
@*                         <a href="#" onclick="preload(@dr["SiteId"].ToString())" data-bs-toggle="modal" data-bs-target="#addTaskModal">Add Task</a>*@
                        <a href="#" id="addTask_@dr["SiteId"].ToString()" data-siteId="@dr["SiteId"].ToString()" data-bs-toggle="modal" data-bs-target="#addTaskModal_@dr["SiteId"].ToString()">Add Task</a>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="addTaskModal" tabindex="-1" aria-labelledby="addTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addTaskModalLabel">Add Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="addTaskModalBody">
                <!-- Content will be loaded here dynamically -->
            </div>            
        </div>
    </div>
</div>

@section scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.7/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.2/js/selectize.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function updateAddTaskFileIcon() {
                const fileInput = document.getElementById('addTaskFile');
                const file = fileInput.files[0];
                const fileType = file ? file.name.split('.').pop().toLowerCase() : 'default';
                const fileIcon = document.getElementById('fileIcon');

                const fileTypeIcons = {
                    'pdf': '/images/icons/pdf.png',
                    'doc': '/images/icons/docs.png',
                    'docx': '/images/icons/docs.png',
                    'txt': '/images/icons/txtfile.png',
                    'jpg': '/images/icons/camerafile.png',
                    'jpeg': '/images/icons/camerafile.png',
                    'png': '/images/icons/camerafile.png',
                    'xls': '/images/icons/excelfile.png',
                    'xlsx': '/images/icons/excelfile.png',
                    'ppt': '/images/icons/pptfile.png',
                    'pptx': '/images/icons/pptfile.png',
                    'unknown': '/images/icons/unsupportedfile.png',
                    'default': '/images/icons/uploadfile.png'
                };

                const iconSrc = fileTypeIcons[fileType] || fileTypeIcons['unknown'];
                if (fileIcon) {
                    fileIcon.src = iconSrc;
                }
            }

            function resetAddTaskFileInputAndIcon() {
                const fileIcon = document.getElementById('addTaskFileIcon');
                const fileInput = document.getElementById('addTaskFile');

                if (fileIcon) {
                    fileIcon.src = '/images/icons/uploadfile.png';
                }
                if (fileInput) {
                    fileInput.value = '';
                    const event = new Event('change');
                    fileInput.dispatchEvent(event);
                }
            }

            document.addEventListener('change', function (event) {
                if (event.target && event.target.id === 'addTaskFile') {
                    updateAddTaskFileIcon();
                }
            });

            document.addEventListener('hidden.bs.modal', function (event) {
                if (event.target && event.target.id === 'addTaskModal') {
                    resetAddTaskFileInputAndIcon();
                }
            });
        });

        $(document).ready(function () {
            $('a[id^="addTask_"]').click(function (event) {
                event.preventDefault();

                var siteId = $(this).data('siteid');

                $.ajax({
                    url: '/User/AddTask?siteid=' + encodeURIComponent(siteId),
                    type: 'GET',
                    success: function (data) {
                        $('#addTaskModalBody').html(data);
                        var uploadModal = new bootstrap.Modal(document.getElementById('addTaskModal'));
                        uploadModal.show();
                    },
                    error: function () {
                        alert('Failed to load the modal content.');
                    }
                });
            });

            $(document).on('submit', '#addtaskForm', function (event) {
                var form = $(this);
                var submitButton = form.find('button[type="submit"]');
                var progressBar = $('#progressBar');
                var progressBarContainer = $('#uploadProgressBar');

                if (form[0].checkValidity() === false) {
                    event.preventDefault();
                    event.stopPropagation();
                } else {
                    event.preventDefault();
                    var formData = new FormData(this);
                    submitButton.prop('disabled', true);
                    progressBarContainer.show();
                    $.ajax({
                        xhr: function () {
                            var xhr = new window.XMLHttpRequest();
                            xhr.upload.addEventListener('progress', function (event) {
                                if (event.lengthComputable) {
                                    var percentComplete = Math.round((event.loaded / event.total) * 100);
                                    progressBar.css('width', percentComplete + '%');
                                    progressBar.text(percentComplete + '%');
                                }
                            }, false);
                            return xhr;
                        },
                        url: form.attr('action'),
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (response) {
                            $('#addTaskModalBody').html(response);
                            progressBarContainer.hide();
                            submitButton.prop('disabled', false);
                            setTimeout(function () {
                                $('#addTaskModal').modal('hide');
                            }, 1000);
                        },
                        error: function () {
                            $('#addTaskModalBody').html(response);
                            progressBarContainer.hide();
                            submitButton.prop('disabled', false);
                        }
                    });
                }
            });
        });
    </script>
}