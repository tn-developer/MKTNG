@model pcg.Models.VariationModel

@{
    ViewData["Title"] = "Variation Task";
}
<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/custom.css" />
</head>
<body>
    <h1 style="text-align:center">Variation Task</h1>
    <input class="form-control" type="text" id="search" placeholder="Search here" onkeyup="searchTable()">
    <div class="ccard" style="overflow-x: auto; max-width: 100%; border: 1px solid darkgray; border-collapse: collapse;">
        <table class="ctable ctable-hover ctable-responsive-sm ctable-sm" id="datatable" style="width: 100%; white-space: nowrap;">
            <thead>
                <tr>
                    <th class="text-center text-uppercase" data-sort="TaskId">Task No.</th>
                    <th class="text-center text-uppercase" data-sort="TaskInfo">Task Info</th>
                    <th class="text-center text-uppercase" data-sort="Name">Assignee</th>
                    <th class="text-center text-uppercase" data-sort="DateStart">Request Date</th>
                    <th class="text-center text-uppercase" data-sort="DateRcvQ1">Forward To Cad</th>
                    <th class="text-center text-uppercase" data-sort="DateRcvQ2">For Quotation</th>
                    <th class="text-center text-uppercase" data-sort="DateRcvQ3">Forwarded to Costing</th>
                    <th class="text-center text-uppercase" data-sort="DateRcvQ4">Costing</th>
                    <th class="text-center text-uppercase" data-sort="DateRcvQ5">Approval</th>
                    <th class="text-center text-uppercase" data-sort="DateRcvQ6">Send to Client</th>
                    <th class="text-center text-uppercase" data-sort="DateFwdQ7">Client Approval</th>
                    <th class="text-center text-uppercase" data-sort="Circulation">Circulation</th>
                </tr>
            </thead>
            <tbody id="myTable">
                @foreach (System.Data.DataRow dr in ViewBag.tlist.Rows)
                {
                    <tr data-taskid="@dr["TaskId"]">
                        <td class="text-center text-nowrap">@dr["TaskId"].ToString()</td>
                        @if ((int)dr["Circulation"] >= 1)
                        {
                            int cir = (int)dr["Circulation"] + 1;
                            <td class="text-center text-nowrap" style="font-weight: bold;">
                                @dr["TaskInfo"].ToString() v@(cir)
                            </td>
                        }
                        else
                        {
                            <td class="text-center text-nowrap" style="font-weight: bold;">@dr["TaskInfo"].ToString()</td>
                        }
                        <td class="text-center text-nowrap">@dr["Name"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["DateStart"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["DateRcvQ1"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["DateRcvQ2"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["DateRcvQ3"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["DateRcvQ4"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["DateRcvQ5"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["DateRcvQ6"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["DateFwdQ7"].ToString()</td>
                        <td class="text-center text-nowrap">@dr["Circulation"].ToString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <ul id="numbers" class="cpagination"></ul>

    <div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Task Info</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- _TaskDetails -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.7/umd/popper.min.js"></script>

    <script>
        function searchTable() {
            var input, filter, table, tr, td, i, j, txtValue;
            input = document.getElementById("search");
            filter = input.value.toUpperCase();
            table = document.getElementById("myTable");
            tr = table.getElementsByTagName("tr");

            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td");
                var rowContainsFilter = false;
                for (j = 0; j < td.length; j++) {
                    if (td[j]) {
                        txtValue = td[j].textContent || td[j].innerText;
                        if (txtValue.toUpperCase().indexOf(filter) > -1) {
                            rowContainsFilter = true;
                            break;
                        }
                    }
                }
                tr[i].style.display = rowContainsFilter ? "" : "none";
            }

            paginate();
        }

        $(document).ready(function () {
            $('table tbody').on('click', 'tr', function () {
                var taskId = $(this).data('taskid');
                if (!taskId) {
                    alert('Task ID is missing.');
                    return;
                }
                var url = '/Admin/TaskDetails?taskId=' + encodeURIComponent(taskId);

                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function (data) {
                        $('#detailsModal .modal-body').html(data);
                        $('#detailsModal').modal('show');
                    },
                    error: function () {
                        alert('Failed to load task details.');
                    }
                });
            });

            var sortOrder = 1;
            var currentPage = 1;

            function splitAlphaNum(str) {
                return str.split(/(\d+)/).map(part => isNaN(part) ? part : parseInt(part, 10));
            }

            $('th').on('click', function () {
                var index = $(this).index();
                var rows = $('#datatable tbody tr').get();

                $('th').find('.sort-arrow').remove();

                $(this).append('<span class="sort-arrow">' + (sortOrder === 1 ? ' ▲' : ' ▼') + '</span>');

                rows.sort(function (a, b) {
                    var A = $(a).children('td').eq(index).text().trim();
                    var B = $(b).children('td').eq(index).text().trim();

                    var partsA = splitAlphaNum(A);
                    var partsB = splitAlphaNum(B);

                    for (var i = 0; i < Math.min(partsA.length, partsB.length); i++) {
                        if (partsA[i] < partsB[i]) return -1 * sortOrder;
                        if (partsA[i] > partsB[i]) return 1 * sortOrder;
                    }

                    return (partsA.length - partsB.length) * sortOrder;
                });

                sortOrder *= -1;

                $.each(rows, function (index, row) {
                    $('#datatable tbody').append(row);
                });

                paginate(currentPage);
            });

            function paginate(page) {
                const rowsPerPage = 10;
                const rows = $('#datatable tbody tr');
                const rowsCount = rows.length;
                const pageCount = Math.ceil(rowsCount / rowsPerPage);
                const numbers = $('#numbers');

                function generatePageNumbers(currentPage) {
                    numbers.empty();
                    numbers.append('<li class="cpage-item" id="prev-page"><a class="cpage-link" href="#"><</a></li>');

                    let startPage = Math.max(1, currentPage - 2);
                    let endPage = Math.min(pageCount, currentPage + 2);

                    if (currentPage <= 3) {
                        endPage = Math.min(5, pageCount);
                    } else if (currentPage >= pageCount - 2) {
                        startPage = Math.max(pageCount - 4, 1);
                    }

                    for (let i = startPage; i <= endPage; i++) {
                        if (i === currentPage) {
                            numbers.append('<li class="cpage-item active"><a class="cpage-link" href="#">' + i + '</a></li>');
                        } else {
                            numbers.append('<li class="cpage-item"><a class="cpage-link" href="#">' + i + '</a></li>');
                        }
                    }

                    numbers.append('<li class="cpage-item" id="next-page"><a class="cpage-link" href="#">></a></li>');
                    togglePaginationButtons(currentPage, pageCount);
                }

                function displayRows(index, rows) {
                    const start = (index - 1) * rowsPerPage;
                    const end = start + rowsPerPage;
                    rows.hide();
                    rows.slice(start, end).show();

                    rows.css('border-bottom', 'none');
                    rows.slice(start, end).last().css('border-bottom', '1px solid black');
                }

                function togglePaginationButtons(currentPage, pageCount) {
                    $('#prev-page').toggleClass('disabled', currentPage === 1);
                    $('#next-page').toggleClass('disabled', currentPage === pageCount);

                    $('#numbers li').removeClass('active');
                    $('#numbers li').eq(currentPage).addClass('active');
                }

                numbers.off('click').on('click', 'li.cpage-item a', function (e) {
                    e.preventDefault();
                    let pageNumber = $(this).text();

                    if (pageNumber === '>') {
                        pageNumber = currentPage + 1;
                    } else if (pageNumber === '<') {
                        pageNumber = currentPage - 1;
                    } else {
                        pageNumber = parseInt(pageNumber);
                    }

                    if (pageNumber >= 1 && pageNumber <= pageCount && pageNumber !== currentPage) {
                        currentPage = pageNumber;
                        displayRows(pageNumber, rows);
                        generatePageNumbers(pageNumber);
                        togglePaginationButtons(pageNumber, pageCount);
                    }
                });

                generatePageNumbers(page);
                displayRows(page, rows);
            }
            paginate(1);
        });
    </script>
</body>