@model pcg.Models.ProcessModel

@{
    ViewData["Title"] = "My Task";
}
<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.2/css/selectize.bootstrap5.min.css">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/custom.css" />
</head>
<h1 style="text-align:center">My Task</h1>
<div class="ccard" style="overflow-x: auto; max-width: 100%; border: 1px solid darkgray; border-collapse: collapse;">
    <table class="ctable ctable-hover ctable-responsive-sm ctable-sm" id="datatable" style="width: 100%; white-space: nowrap;">
        <thead>
            <tr>
                <th class="text-center text-uppercase">Task No.</th>
                <th class="text-center text-uppercase">Task Info</th>
                <th class="text-center text-uppercase">Client/Site</th>
                <th class="text-center text-uppercase">Added By</th>
                <th class="text-center text-uppercase">Date Forwarded</th>
                <th class="text-center text-uppercase">Date Received</th>
                <th class="text-center text-uppercase">Assignee</th>
                <th class="text-center text-uppercase">Action</th>
            </tr>
        </thead>
        <tbody id="myTable">
            @foreach (System.Data.DataRow dr in ViewBag.Tasklog.Rows)
            {
                <tr id="row_@dr["TaskId"]" data-taskid="@dr["TaskId"].ToString()">
                    <td class="text-center text-nowrap show-details">@dr["TaskId"].ToString()</td>
                    @if ((int)dr["Circulation"] >= 1)
                    {
                        int cir = (int)dr["Circulation"] + 1;
                        <td class="text-center text-nowrap show-details" style="font-weight: bold;">
                            @dr["Task"].ToString() @dr["Description"].ToString() v@(cir)
                        </td>
                    }
                    else
                    {
                        <td class="text-center text-nowrap show-details" style="font-weight: bold;">@dr["Task"].ToString() @dr["Description"].ToString()</td>
                    }
                    <td class="text-center text-nowrap show-details">@dr["Client"].ToString() @dr["Site"].ToString()</td>
                    <td class="text-center text-nowrap show-details">@dr["AddedBy"].ToString()</td>
                    <td class="text-center text-nowrap show-details">@dr["DateFwd"].ToString()</td>
                    <td class="text-center text-nowrap show-details">@dr["DateRcv"].ToString()</td>
                    <td class="text-center text-nowrap show-details">@dr["Name"].ToString()</td>
                    <td>
                        @if (dr["Process"].ToString() == "Q7")
                        {
                            <div class="modal fade" id="Sts_@dr["TaskId"].ToString()" tabindex="-1" aria-labelledby="stsModal_@dr["TaskId"].ToString()" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h1 class="modal-title fs-5" id="stsModal_@dr["TaskId"].ToString()">Send to site</h1>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" onclick="closeSts('@dr["TaskId"].ToString()')" aria-label="Close"></button>
                                        </div>
                                        <form asp-controller="Admin" asp-action="TaskForward" method="post">
                                            <div class="modal-body">
                                                <p>Are you sure to send this to site?</p>
                                            </div>
                                            <div class="modal-footer">
                                                <input type="hidden" asp-for="TaskId" value="@dr["TaskId"].ToString()" />
                                                <input type="hidden" asp-for="Task" value="@dr["Task"].ToString()" />
                                                <input type="hidden" asp-for="Details" value="@dr["Details"].ToString()" />
                                                <input type="hidden" asp-for="AssignId" value="@ViewData["SessionId"]" />
                                                <input type="hidden" asp-for="Code" value="Q8" />
                                                <input type="hidden" asp-for="SiteSC" value="@dr["SiteSC"].ToString()" />
                                                <input type="hidden" asp-for="SiteTK" value="@dr["SiteTK"].ToString()" />
                                                <button type="submit" class="btn btn-outline-info" id="confirmSts('@dr["TaskId"].ToString()')">Confirm</button>
                                                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-center">
                                <button id="btnRevise_@dr["TaskId"].ToString()" data-taskid="@dr["TaskId"].ToString()" type="button" class="btn btn-info" style="height: 25px; line-height: 12px; margin-right: 3px" data-bs-toggle="modal" data-bs-target="#ReviseModal">Revise</button>
                                <button type="button" class="btn btn-primary" style="height: 25px; line-height: 12px;" data-bs-toggle="modal" data-bs-target="#Sts_@dr["TaskId"].ToString()">Send to Site</button>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-content-center">
                                <button id="btnFwd_@dr["TaskId"].ToString()" data-taskid="@dr["TaskId"].ToString()" type="button" class="btn btn-primary" style="height: 25px; line-height: 12px; margin-right: 3px" data-bs-toggle="modal" data-bs-target="#FwdModal">Forward</button>
                                <button id="showUpload_@dr["TaskId"].ToString()" data-taskid="@dr["TaskId"].ToString()" type="button" class="btn btn-info" style="height: 25px; line-height: 12px">Upload</button>
                            </div>
                        }
                </tr>
            }
        </tbody>
    </table>
</div>

<ul id="numbers" class="cpagination"></ul>

<div class="modal fade" id="ReviseModal" tabindex="-1" aria-labelledby="ReviseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ReviseModalLabel">Revise Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- _Forward content -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="FwdModal" tabindex="-1" aria-labelledby="FwdModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="FwdModalLabel">Forward Task</h5>

                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- _Forward content -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Task Info</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- _TaskDetails -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">Upload File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="uploadModalBody">
                <!-- Content will be loaded here dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.7/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.15.2/js/selectize.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function updateFileIcon() {
                const fileInput = document.getElementById('formFile');
                const file = fileInput.files[0];
                const fileType = file ? file.name.split('.').pop().toLowerCase() : 'default';
                const fileIcon = document.getElementById('fileIcon');

                const fileTypeIcons = {
                    'pdf': '/images/icons/pdf.png',
                    'doc': '/images/icons/docs.png',
                    'docx': '/images/icons/docs.png',
                    'txt': '/images/icons/txtfile.png',
                    'jpg': '/images/icons/camerafile.png',
                    'jpeg': '/images/icons/camerafile.png',
                    'png': '/images/icons/camerafile.png',
                    'xls': '/images/icons/excelfile.png',
                    'xlsx': '/images/icons/excelfile.png',
                    'ppt': '/images/icons/pptfile.png',
                    'pptx': '/images/icons/pptfile.png',
                    'unknown': '/images/icons/unsupportedfile.png',
                    'default': '/images/icons/uploadfile.png'
                };

                const iconSrc = fileTypeIcons[fileType] || fileTypeIcons['unknown'];
                if (fileIcon) {
                    fileIcon.src = iconSrc;
                }
            }

            function resetFileInputAndIcon() {
                const fileIcon = document.getElementById('fileIcon');
                const fileInput = document.getElementById('formFile');

                if (fileIcon) {
                    fileIcon.src = '/images/icons/uploadfile.png';
                }
                if (fileInput) {
                    fileInput.value = '';
                    const event = new Event('change');
                    fileInput.dispatchEvent(event);
                }
            }

            document.addEventListener('change', function (event) {
                if (event.target && event.target.id === 'formFile') {
                    updateFileIcon();
                }
            });

            document.addEventListener('hidden.bs.modal', function (event) {
                if (event.target && event.target.id === 'fileUploadModal') {
                    resetFileInputAndIcon();
                }
            });
        });

        $(document).ready(function () {
            console.log("Document ready function executed.");
            $('table tbody').on('click', 'tr[id^="row_"] .show-details', function () {
                var $tr = $(this).closest('tr[id^="row_"]');
                var taskId = $tr.data('taskid');
                if (!taskId) {
                    alert('Task ID is missing.');
                    return;
                }
                var url = '/Admin/TaskDetails?taskId=' + encodeURIComponent(taskId);

                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function (data) {
                        $('#detailsModal .modal-body').html(data);
                        $('#detailsModal').modal('show');
                    },
                    error: function () {
                        alert('Failed to load task details.');
                    }
                });
            });

            $('button[id^="btnFwd_"]').click(function () {
                var $button = $(this).closest('button[id^="btnFwd_"]');
                var taskId = $button.data('taskid');
                var url = '/Admin/Forward?taskId=' + encodeURIComponent(taskId);

                console.log(taskId);
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function (data) {
                        $('#FwdModal .modal-body').html(data);
                        $('#FwdModal').modal('show');
                    },
                    error: function () {
                        alert('Failed to load content.');
                    }
                });
            });

            $('button[id^="btnRevise_"]').click(function () {
                var $button = $(this).closest('button[id^="btnRevise_"]');
                var taskId = $button.data('taskid');
                var url = '/Admin/Revise?taskId=' + encodeURIComponent(taskId);

                console.log(taskId);
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function (data) {
                        $('#ReviseModal .modal-body').html(data);
                        $('#ReviseModal').modal('show');
                    },
                    error: function () {
                        alert('Failed to load content.');
                    }
                });
            });

            $('button[id^="showUpload_"]').click(function (event) {
                event.preventDefault();

                var taskId = $(this).data('taskid');

                $.ajax({
                    url: '/Admin/Upload?taskid=' + encodeURIComponent(taskId),
                    type: 'GET',
                    success: function (data) {
                        $('#uploadModalBody').html(data);
                        var uploadModal = new bootstrap.Modal(document.getElementById('uploadModal'));
                        uploadModal.show();
                    },
                    error: function () {
                        alert('Failed to load the modal content.');
                    }
                });
            });

            $(document).on('submit', '#uploadForm', function (event) {
                event.preventDefault();

                var form = $(this);
                var formData = new FormData(this);

                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        $('#uploadModalBody').html(response); // Reload the modal content with validation results
                    },
                    error: function () {
                        alert('File upload failed.');
                    }
                });
            });


            var sortOrder = 1;
            var currentPage = 1;

            function splitAlphaNum(str) {
                return str.split(/(\d+)/).map(part => isNaN(part) ? part : parseInt(part, 10));
            }

            $('th').on('click', function () {
                var index = $(this).index();
                var rows = $('#datatable tbody tr').get();

                $('th').find('.sort-arrow').remove();

                $(this).append('<span class="sort-arrow">' + (sortOrder === 1 ? ' ▲' : ' ▼') + '</span>');

                rows.sort(function (a, b) {
                    var A = $(a).children('td').eq(index).text().trim();
                    var B = $(b).children('td').eq(index).text().trim();

                    var partsA = splitAlphaNum(A);
                    var partsB = splitAlphaNum(B);

                    for (var i = 0; i < Math.min(partsA.length, partsB.length); i++) {
                        if (partsA[i] < partsB[i]) return -1 * sortOrder;
                        if (partsA[i] > partsB[i]) return 1 * sortOrder;
                    }

                    return (partsA.length - partsB.length) * sortOrder;
                });

                sortOrder *= -1;

                $.each(rows, function (index, row) {
                    $('#datatable tbody').append(row);
                });

                paginate(currentPage);
            });

            function paginate(page) {
                const rowsPerPage = 10;
                const rows = $('#datatable tbody tr');
                const rowsCount = rows.length;
                const pageCount = Math.ceil(rowsCount / rowsPerPage);
                const numbers = $('#numbers');

                function generatePageNumbers(currentPage) {
                    numbers.empty();
                    numbers.append('<li class="cpage-item" id="prev-page"><a class="cpage-link" href="#"><</a></li>');

                    let startPage = Math.max(1, currentPage - 2);
                    let endPage = Math.min(pageCount, currentPage + 2);

                    if (currentPage <= 3) {
                        endPage = Math.min(5, pageCount);
                    } else if (currentPage >= pageCount - 2) {
                        startPage = Math.max(pageCount - 4, 1);
                    }

                    for (let i = startPage; i <= endPage; i++) {
                        if (i === currentPage) {
                            numbers.append('<li class="cpage-item active"><a class="cpage-link" href="#">' + i + '</a></li>');
                        } else {
                            numbers.append('<li class="cpage-item"><a class="cpage-link" href="#">' + i + '</a></li>');
                        }
                    }

                    numbers.append('<li class="cpage-item" id="next-page"><a class="cpage-link" href="#">></a></li>');
                    togglePaginationButtons(currentPage, pageCount);
                }

                function displayRows(index, rows) {
                    const start = (index - 1) * rowsPerPage;
                    const end = start + rowsPerPage;
                    rows.hide();
                    rows.slice(start, end).show();

                    rows.css('border-bottom', 'none');
                    rows.slice(start, end).last().css('border-bottom', '1px solid black');
                }

                function togglePaginationButtons(currentPage, pageCount) {
                    $('#prev-page').toggleClass('disabled', currentPage === 1);
                    $('#next-page').toggleClass('disabled', currentPage === pageCount);

                    $('#numbers li').removeClass('active');
                    $('#numbers li').eq(currentPage).addClass('active');
                }

                numbers.off('click').on('click', 'li.cpage-item a', function (e) {
                    e.preventDefault();
                    let pageNumber = $(this).text();

                    if (pageNumber === '>') {
                        pageNumber = currentPage + 1;
                    } else if (pageNumber === '<') {
                        pageNumber = currentPage - 1;
                    } else {
                        pageNumber = parseInt(pageNumber);
                    }

                    if (pageNumber >= 1 && pageNumber <= pageCount && pageNumber !== currentPage) {
                        currentPage = pageNumber;
                        displayRows(pageNumber, rows);
                        generatePageNumbers(pageNumber);
                        togglePaginationButtons(pageNumber, pageCount);
                    }
                });

                generatePageNumbers(page);
                displayRows(page, rows);
            }
            paginate(1);
        });
    </script>
}